{"ast":null,"code":"var _jsxFileName = \"/Users/loganlentz/Documents/GitHub/IPFS-Stat-Viewer/d3-react/src/components/TreeMap/TreeMapGroup.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport * as d3 from \"d3\";\nimport PropTypes from \"prop-types\";\nimport { useMemo } from \"react\"; // ************************ JSDoc Types ************************\n\n/**\n * @typedef TreeMapGroupProps\n * @property {number} [width]\n * @property {number} [height]\n * @property {data} data\n * @property {(d: any) => any} [transform]\n */\n// ************************ Graph Config ************************ // Remove these separators when moving to your repo.\n// NOTE: Move to shared config file if separating hook and component.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAULT = {\n  width: 500,\n  height: 500\n};\nconst BLOCK_GAP = 0; // Change this to update gaps between the blocks.\n\nconst BLOCK_LABEL_CONFIG = {\n  xOffset: 5,\n  yOffset: 20,\n  fontSize: \"16px\",\n  fill: \"white\"\n};\nconst MARGIN = {\n  top: 10,\n  bottom: 10,\n  left: 10,\n  right: 10\n}; // Used if transform function is not provided to the component.\n\n/**\n * @param {IPFSResponse} data\n * @returns {any}\n */\n\nconst defaultTransform = data => data; // ************************ Graph Utility ************************\n// NOTE: This section should be moved to utility file for cleaner code.\n\n/**\n * @param {string} filename\n * @description Returns a color based on the extension of the filename.\n */\n\n\nfunction getBlockColorFromFilename(filename) {\n  const extension = filename.split(\".\").at(-1).toLowerCase(); // Get the extension of the filename based on string after last period.\n\n  switch (extension) {\n    case \"jpg\":\n    case \"png\":\n    case \"jpeg\":\n      return \"#BE8C63\";\n\n    case \"pdf\":\n      return \"palevioletred\";\n\n    default:\n      return \"slateblue\";\n  }\n} // ************************ Graph Hooks ************************\n\n\nconst useTreeNode = (data, nodeHeight, nodeWidth, transform) => {\n  _s();\n\n  const tree = useMemo(() => {\n    const transformedData = transform(data);\n    const treeRoot = d3.hierarchy(transformedData).sum(d => d.value / 1024); // Convert data to KiB.\n\n    d3.treemap().size([nodeWidth - MARGIN.left - MARGIN.right, nodeHeight - MARGIN.top - MARGIN.bottom]).padding(2)(treeRoot);\n    return treeRoot;\n  }, [data, nodeHeight, nodeWidth, transform]);\n  return tree;\n}; // ************************ Graph Component ************************\n\n/**\n * @param {TreeMapGroupProps} props\n * @returns {JSX.Element}\n */\n\n\n_s(useTreeNode, \"d2aVv/ZJ5MjsrjerSPo1KZzwsZw=\");\n\nfunction TreeMapGroup(_ref) {\n  _s2();\n\n  let {\n    transform = defaultTransform,\n    width = DEFAULT.width,\n    height = DEFAULT.height,\n    data,\n    ...otherProps\n  } = _ref;\n  const tree = useTreeNode(data, height, width, transform);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: width + MARGIN.left + MARGIN.right,\n    height: height + MARGIN.top + MARGIN.bottom,\n    children: /*#__PURE__*/_jsxDEV(\"g\", {\n      transform: `translate(${MARGIN.left}, ${MARGIN.top})`,\n      children: [/*#__PURE__*/_jsxDEV(\"g\", {\n        children: tree.leaves().map(leaf => /*#__PURE__*/_jsxDEV(\"rect\", {\n          x: leaf.x0,\n          y: leaf.y0,\n          width: leaf.x1 - leaf.x0 - BLOCK_GAP,\n          height: leaf.y1 - leaf.y0 - BLOCK_GAP,\n          stroke: \"black\",\n          fill: getBlockColorFromFilename(leaf.data.name)\n        }, leaf.data.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        children: tree.leaves().map(leaf => /*#__PURE__*/_jsxDEV(\"text\", {\n          x: leaf.x0 + BLOCK_LABEL_CONFIG.xOffset,\n          y: leaf.y0 + BLOCK_LABEL_CONFIG.yOffset,\n          fontSize: BLOCK_LABEL_CONFIG.fontSize,\n          fill: BLOCK_LABEL_CONFIG.fill,\n          children: leaf.data.name\n        }, leaf.data.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(TreeMapGroup, \"AFPtvW/4mcDj8nxHz9b7ftxGaNY=\", false, function () {\n  return [useTreeNode];\n});\n\n_c = TreeMapGroup;\nTreeMapGroup.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  data: PropTypes.object,\n  transform: PropTypes.func\n};\nexport default TreeMapGroup;\n\nvar _c;\n\n$RefreshReg$(_c, \"TreeMapGroup\");","map":{"version":3,"sources":["/Users/loganlentz/Documents/GitHub/IPFS-Stat-Viewer/d3-react/src/components/TreeMap/TreeMapGroup.js"],"names":["d3","PropTypes","useMemo","DEFAULT","width","height","BLOCK_GAP","BLOCK_LABEL_CONFIG","xOffset","yOffset","fontSize","fill","MARGIN","top","bottom","left","right","defaultTransform","data","getBlockColorFromFilename","filename","extension","split","at","toLowerCase","useTreeNode","nodeHeight","nodeWidth","transform","tree","transformedData","treeRoot","hierarchy","sum","d","value","treemap","size","padding","TreeMapGroup","otherProps","leaves","map","leaf","x0","y0","x1","y1","name","propTypes","number","object","func"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport PropTypes from \"prop-types\";\nimport { useMemo } from \"react\";\n\n// ************************ JSDoc Types ************************\n\n/**\n * @typedef TreeMapGroupProps\n * @property {number} [width]\n * @property {number} [height]\n * @property {data} data\n * @property {(d: any) => any} [transform]\n */\n\n// ************************ Graph Config ************************ // Remove these separators when moving to your repo.\n// NOTE: Move to shared config file if separating hook and component.\n\nconst DEFAULT = {\n  width: 500,\n  height: 500,\n};\n\nconst BLOCK_GAP = 0; // Change this to update gaps between the blocks.\n\nconst BLOCK_LABEL_CONFIG = {\n  xOffset: 5,\n  yOffset: 20,\n  fontSize: \"16px\",\n  fill: \"white\",\n};\n\nconst MARGIN = {\n  top: 10,\n  bottom: 10,\n  left: 10,\n  right: 10,\n};\n\n// Used if transform function is not provided to the component.\n/**\n * @param {IPFSResponse} data\n * @returns {any}\n */\nconst defaultTransform = (data) => data;\n\n// ************************ Graph Utility ************************\n// NOTE: This section should be moved to utility file for cleaner code.\n\n/**\n * @param {string} filename\n * @description Returns a color based on the extension of the filename.\n */\nfunction getBlockColorFromFilename(filename) {\n  const extension = filename.split(\".\").at(-1).toLowerCase(); // Get the extension of the filename based on string after last period.\n  switch (extension) {\n    case \"jpg\":\n    case \"png\":\n    case \"jpeg\":\n      return \"#BE8C63\";\n    case \"pdf\":\n      return \"palevioletred\";\n    default:\n      return \"slateblue\";\n  }\n}\n\n// ************************ Graph Hooks ************************\n\nconst useTreeNode = (data, nodeHeight, nodeWidth, transform) => {\n  const tree = useMemo(() => {\n    const transformedData = transform(data);\n    const treeRoot = d3.hierarchy(transformedData).sum((d) => d.value / 1024); // Convert data to KiB.\n    d3\n      .treemap()\n      .size([\n        nodeWidth - MARGIN.left - MARGIN.right,\n        nodeHeight - MARGIN.top - MARGIN.bottom,\n      ])\n      .padding(2)(treeRoot);\n    return treeRoot;\n  }, [data, nodeHeight, nodeWidth, transform]);\n\n  return tree;\n};\n\n// ************************ Graph Component ************************\n\n/**\n * @param {TreeMapGroupProps} props\n * @returns {JSX.Element}\n */\nfunction TreeMapGroup({\n  transform = defaultTransform,\n  width = DEFAULT.width,\n  height = DEFAULT.height,\n  data,\n  ...otherProps\n}) {\n  const tree = useTreeNode(data, height, width, transform);\n\n  return (\n    <svg\n      width={width + MARGIN.left + MARGIN.right}\n      height={height + MARGIN.top + MARGIN.bottom}\n    >\n      <g transform={`translate(${MARGIN.left}, ${MARGIN.top})`}>\n        {/* Render Data Blocks */}\n        <g>\n          {tree.leaves().map((leaf) => (\n            <rect\n              key={leaf.data.name}\n              x={leaf.x0}\n              y={leaf.y0}\n              width={leaf.x1 - leaf.x0 - BLOCK_GAP}\n              height={leaf.y1 - leaf.y0 - BLOCK_GAP}\n              stroke=\"black\"\n              fill={getBlockColorFromFilename(leaf.data.name)}\n            />\n          ))}\n        </g>\n        {/* Render block labels */}\n        <g>\n          {tree.leaves().map((leaf) => (\n            <text\n              key={leaf.data.name}\n              x={leaf.x0 + BLOCK_LABEL_CONFIG.xOffset}\n              y={leaf.y0 + BLOCK_LABEL_CONFIG.yOffset}\n              fontSize={BLOCK_LABEL_CONFIG.fontSize}\n              fill={BLOCK_LABEL_CONFIG.fill}\n            >\n              {leaf.data.name}\n            </text>\n          ))}\n        </g>\n      </g>\n    </svg>\n  );\n}\n\nTreeMapGroup.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  data: PropTypes.object,\n  transform: PropTypes.func,\n};\n\nexport default TreeMapGroup;\n"]},"metadata":{},"sourceType":"module"}