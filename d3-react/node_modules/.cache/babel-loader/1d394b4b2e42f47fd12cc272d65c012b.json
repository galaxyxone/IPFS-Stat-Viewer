{"ast":null,"code":"var _jsxFileName = \"/Users/loganlentz/Documents/GitHub/IPFS-Stat-Viewer/d3-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { TreeMapGroup } from \"./components/TreeMap\";\nimport \"./App.css\"; // Don't forget to port this css file too, if you want the resize and styles to work correctly.\n// ************************ JSDoc Types ************************\n\n/**\n * @typedef IPFSResponse\n * @property {Array<IPFSFileEntry>} Entries\n */\n\n/**\n * @typedef IPFSFileEntry\n * @property {string} Hash\n * @property {string} Name\n * @property {number} Size\n * @property {number} Type\n */\n\n/**\n * @type {IFPSResponse}\n */\n// ************************ Graph Utility ************************\n// NOTE: This section should be moved to utility file for cleaner code.\n\n/**\n * Debounces function\n *\n * Note: This is needed in code to debounce resize event.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction debounce(func) {\n  let timer;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    const context = this;\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(() => {\n      timer = null;\n      func.apply(context, args);\n    }, 500);\n  };\n}\n/**\n * @param {IPFSResponse} data\n * @returns {{ children: Array }}\n */\n\n\nconst transformIPFSResponse = data => {\n  const entries = data === null || data === void 0 ? void 0 : data.Entries;\n\n  if (!entries || entries.length === 0) {\n    return {\n      children: []\n    };\n  } // We are given data for some node, therefore construct children for it from the given entries.\n\n\n  const children = entries.filter(entry => entry.Size !== 0).map(entry => ({\n    name: entry.Name,\n    value: entry.Size\n  }));\n  return {\n    children\n  };\n};\n\nfunction App() {\n  _s();\n\n  // IPFS Response data\n\n  /** @type {[IPFSResponse, React.Dispatch<IPFSResponse>]} */\n  const [IPFSFiles, setIPFSFiles] = useState(null); // Keeps track of current dimensions for the graph for the d3's tree-graph.\n\n  const [dimensions, setDimensions] = useState(null); // Keeps reference of the graph's container element to later use for getting size of it.\n\n  const containerRef = useRef(); // Logic to get the graph's container element width and height.\n\n  const updateDimensions = useCallback(() => debounce(() => {\n    if (containerRef.current) {\n      // Set dimensions based on bounds of the parent container.\n      const {\n        width,\n        height\n      } = containerRef.current.getBoundingClientRect();\n      setDimensions({\n        width,\n        height\n      });\n    }\n  })(), // Usecallback expects inline function, so wrapping and calling debounce ourselves.\n  [containerRef]); // Update Dimensions upon mounting the component.\n\n  useEffect(() => {\n    updateDimensions();\n  }, [updateDimensions]); // Updates the size of the graph according to the size of the window.\n\n  useEffect(() => {\n    // Debounce resize event to avoid firing too many state updates due to resize events.\n    window.addEventListener(\"resize\", updateDimensions);\n    return () => {\n      window.removeEventListener(\"resize\", updateDimensions);\n    };\n  }, [updateDimensions]); // You can do something like this for getting data from the IPFS API.\n\n  useEffect(() => {\n    function getIPFSFiles() {\n      fetch(\"http://127.0.0.1:5001/api/v0/files/ls\", {\n        method: \"POST\"\n      }).then(response => response.json()).then(response => setIPFSFiles(response)).catch(console.error);\n    }\n\n    getIPFSFiles();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"graph-container\",\n    children: dimensions && IPFSFiles &&\n    /*#__PURE__*/\n    // Remove this if you want to see the graph without resize feature.\n    _jsxDEV(TreeMapGroup, {\n      width: dimensions.width,\n      height: dimensions.height,\n      transform: transformIPFSResponse,\n      data: IPFSFiles // Use this if fetching data from node.\n      //data={mockIPFSResponse}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"guPjSsM/2e9okNjV8+TFKX9v7eg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/loganlentz/Documents/GitHub/IPFS-Stat-Viewer/d3-react/src/App.js"],"names":["useCallback","useEffect","useRef","useState","TreeMapGroup","debounce","func","timer","args","context","clearTimeout","setTimeout","apply","transformIPFSResponse","data","entries","Entries","length","children","filter","entry","Size","map","name","Name","value","App","IPFSFiles","setIPFSFiles","dimensions","setDimensions","containerRef","updateDimensions","current","width","height","getBoundingClientRect","window","addEventListener","removeEventListener","getIPFSFiles","fetch","method","then","response","json","catch","console","error"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { TreeMapGroup } from \"./components/TreeMap\";\n\nimport \"./App.css\"; // Don't forget to port this css file too, if you want the resize and styles to work correctly.\n\n// ************************ JSDoc Types ************************\n\n/**\n * @typedef IPFSResponse\n * @property {Array<IPFSFileEntry>} Entries\n */\n\n/**\n * @typedef IPFSFileEntry\n * @property {string} Hash\n * @property {string} Name\n * @property {number} Size\n * @property {number} Type\n */\n\n/**\n * @type {IFPSResponse}\n */\n\n\n// ************************ Graph Utility ************************\n// NOTE: This section should be moved to utility file for cleaner code.\n\n/**\n * Debounces function\n *\n * Note: This is needed in code to debounce resize event.\n */\nfunction debounce(func) {\n  let timer;\n  return function (...args) {\n    const context = this;\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(() => {\n      timer = null;\n      func.apply(context, args);\n    }, 500);\n  };\n}\n\n/**\n * @param {IPFSResponse} data\n * @returns {{ children: Array }}\n */\nconst transformIPFSResponse = (data) => {\n  const entries = data?.Entries;\n\n  if (!entries || entries.length === 0) {\n    return { children: [] };\n  }\n\n  // We are given data for some node, therefore construct children for it from the given entries.\n  const children = entries.filter((entry) => entry.Size !==0)\n    .map((entry) => ({\n    name: entry.Name,\n    value: entry.Size,\n  }));\n\n  return { children };\n};\n\nfunction App() {\n  // IPFS Response data\n  /** @type {[IPFSResponse, React.Dispatch<IPFSResponse>]} */\n   const [IPFSFiles, setIPFSFiles] = useState(null);\n\n  // Keeps track of current dimensions for the graph for the d3's tree-graph.\n  const [dimensions, setDimensions] = useState(null);\n\n  // Keeps reference of the graph's container element to later use for getting size of it.\n  const containerRef = useRef();\n\n  // Logic to get the graph's container element width and height.\n  const updateDimensions = useCallback(\n    () =>\n      debounce(() => {\n        if (containerRef.current) {\n          // Set dimensions based on bounds of the parent container.\n          const { width, height } =\n            containerRef.current.getBoundingClientRect();\n          setDimensions({ width, height });\n        }\n      })(), // Usecallback expects inline function, so wrapping and calling debounce ourselves.\n    [containerRef]\n  );\n\n  // Update Dimensions upon mounting the component.\n  useEffect(() => {\n    updateDimensions();\n  }, [updateDimensions]);\n\n  // Updates the size of the graph according to the size of the window.\n  useEffect(() => {\n    // Debounce resize event to avoid firing too many state updates due to resize events.\n    window.addEventListener(\"resize\", updateDimensions);\n    return () => {\n      window.removeEventListener(\"resize\", updateDimensions);\n    };\n  }, [updateDimensions]);\n\n  // You can do something like this for getting data from the IPFS API.\n   useEffect(() => {\n     function getIPFSFiles() {\n       fetch(\"http://127.0.0.1:5001/api/v0/files/ls\", {\n         method: \"POST\",\n       })\n         .then((response) => response.json())\n         .then((response) => setIPFSFiles(response))\n         .catch(console.error);\n     }\n     getIPFSFiles();\n   }, []);\n\n  return (\n    <div ref={containerRef} className=\"graph-container\">\n      {dimensions && IPFSFiles &&( // Remove this if you want to see the graph without resize feature.\n        <TreeMapGroup\n          width={dimensions.width}\n          height={dimensions.height}\n          transform={transformIPFSResponse}\n          data={IPFSFiles} // Use this if fetching data from node.\n          //data={mockIPFSResponse}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}